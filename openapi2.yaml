openapi: 3.0.0
info:
  title: Authn API
  description: |
    This is the API for authn in MM
    ## Security:
    Paths | Authorization header
    ----- |---------
    /oauth/token | Basic <base64(client_id:client_secret)>
  contact:
    email: authn@masmovil.com
  version: 1.4.0
servers:
- url: http://localhost:8080
- url: http://localhost:8081
tags:
- name: Applications
  description: API for managing applications
- name: Clients
  description: API for managing OAuth2 clients and associate them to applications.
- name: Administration
  description: API for Authn administration
- name: OAuth2
  description: OAuth2 authentication endpoints
- name: IAM
  description: Identity and Access Management API
- name: Health-check
  description: Operations available to regular developers
- name: Password
  description: Operations related to credentials management
- name: Users
  description: Operations related to user management
- name: ServiceAccounts
  description: Operations related to service account management
paths:
  /oauth/token:
    post:
      tags:
      - OAuth2
      summary: Generate an access_token
      operationId: getAccessTokenWithForm
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              description: The authorization server MUST include the HTTP "Cache-Control"
                response header field with a value of "no-store" in any response containing
                tokens, secrets, or other sensitive information.
              style: simple
              explode: false
              schema:
                type: string
                default: no-store
                enum:
                - no-store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessTokenResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorAccessTokenResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorAccessTokenResponse'
        "403":
          description: Too Many Login Attempts Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorAccessTokenResponse'
  /oauth/authorize:
    get:
      tags:
      - OAuth2
      summary: Get authentication page
      description: Logs in the user or redirects it to a page to authenticate itself
      operationId: getAuthorizationPage
      parameters:
      - name: client_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: TtsdmebPcQtEnvLsKw7x
      - name: response_type
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          enum:
          - token
          - code
        example: token
      - name: redirect_uri
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: https://masmovil.com/login/callback
      - name: state
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 0AxLygT73V6kreKzkQySOjfYShIvK/TR
      - name: code_challenge
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 5VTycQU924SQ3jHp5g9zcvMF2ai3aN89kxzB2D5QJUrejxam3jddqFUugD8F
      responses:
        "302":
          description: Authorization code/Implicit grant response
          headers:
            Location:
              description: The redirect uri of the client
              style: simple
              explode: false
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorAccessTokenResponse'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errorAccessTokenResponse'
  /applications:
    get:
      tags:
      - Applications
      summary: Get all applications
      description: |
        Get all applications
      operationId: getAllApplications
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/application'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - Applications
      summary: Add an application
      description: Adds an application
      operationId: addApplication
      requestBody:
        description: Application to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inboundApplication'
        required: true
      responses:
        "201":
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdResponse'
        "400":
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: application already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /applications/{appId}:
    get:
      tags:
      - Applications
      summary: Get application by id
      description: |
        Get application identified by id
      operationId: getApp
      parameters:
      - name: appId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application'
        "400":
          description: Invalid application id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "404":
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    put:
      tags:
      - Applications
      summary: Update application by id
      description: |
        Update application info identified by id
      operationId: updateApp
      parameters:
      - name: appId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inboundApplication'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application'
        "400":
          description: Invalid application id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "404":
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    delete:
      tags:
      - Applications
      summary: Delete application
      description: |
        Delete application
      operationId: deleteApp
      parameters:
      - name: appId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: OK
        "400":
          description: Invalid application id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "404":
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /applications/{appId}/clients:
    get:
      tags:
      - Clients
      summary: Get all clients of this application
      description: |
        Get all clients
      operationId: getAllClients
      parameters:
      - name: appId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/client'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - Clients
      summary: Add an client to this application
      description: Adds an client
      operationId: addClient
      parameters:
      - name: appId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Client to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inboundClient'
        required: true
      responses:
        "201":
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdResponse'
        "400":
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: client already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /applications/{appId}/clients/{clientId}:
    get:
      tags:
      - Clients
      summary: Get client by id
      description: |
        Get client identified by id
      operationId: getClient
      parameters:
      - name: appId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: clientId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client'
        "400":
          description: Invalid client id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    put:
      tags:
      - Clients
      summary: Update client by id
      description: |
        Update client info identified by id
      operationId: updateClient
      parameters:
      - name: appId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: clientId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inboundClient'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client'
        "400":
          description: Invalid client id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    delete:
      tags:
      - Clients
      summary: Delete client
      description: |
        Delete client
      operationId: deleteClient
      parameters:
      - name: appId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: clientId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: OK
        "400":
          description: Invalid client id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /keys:
    post:
      tags:
      - Administration
      summary: Rotate RSA keys
      description: |
        This endpoint creates a new RSA key pair and deprecates the old ones.
      operationId: rotateKeys
      responses:
        "201":
          description: Keys rotated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwk'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /keys/{kid}:
    delete:
      tags:
      - Administration
      summary: Delete an RSA key
      description: |
        This endpoint deletes a RSA key pair given its key id "kid"
      operationId: deleteKey
      parameters:
      - name: kid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "201":
          description: Key deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwk'
        "404":
          description: Key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /permissions:
    get:
      tags:
      - IAM
      summary: Retrieves multiple permissions.
      operationId: retrieveMultiplePermissions
      parameters:
      - name: from
        in: query
        description: Indicates the offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 0
      - name: limit
        in: query
        description: Indicates the number of permissions to retrieve
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 10
      responses:
        "200":
          description: The permission/s have been successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/permission'
        "400":
          description: One or more of the query parameters is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - IAM
      summary: Creates a new permission or a set of new permissions.
      operationId: createPermission
      parameters:
      - name: batch
        in: query
        description: Indicates that the request is an array with multiple permissions.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/permissionRequest'
        required: true
      responses:
        "201":
          description: The permission/s have been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdResponse'
        "400":
          description: The permission lacks required parameters or the name does not
            match the pattern.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A permission with the same name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /permissions/{permissionId}:
    get:
      tags:
      - IAM
      summary: Retrieves a single permission
      operationId: retrievePermission
      parameters:
      - name: permissionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Permission successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permission'
        "404":
          description: Permission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    put:
      tags:
      - IAM
      summary: Updates a permission
      operationId: updatePermission
      parameters:
      - name: permissionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/permissionRequest'
        required: true
      responses:
        "204":
          description: Permission successfully updated
        "404":
          description: Permission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A permission with the same name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    delete:
      tags:
      - IAM
      summary: Deletes a permission
      operationId: deletePermission
      parameters:
      - name: permissionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Permission successfully deleted
        "404":
          description: Permission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /roles:
    get:
      tags:
      - IAM
      summary: Retrieves multiple roles.
      operationId: retrieveMultipleRoles
      parameters:
      - name: from
        in: query
        description: Indicates the offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 0
      - name: limit
        in: query
        description: Indicates the number of roles to retrieve
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 10
      responses:
        "200":
          description: The roles have been successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/role'
        "400":
          description: One or more of the query parameters is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - IAM
      summary: Creates a new role.
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleRequest'
        required: true
      responses:
        "201":
          description: The role has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdResponse'
        "400":
          description: The role lacks required parameters or is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A role with the same name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /roles/{roleId}:
    get:
      tags:
      - IAM
      summary: Retrieves a single role
      operationId: retrieveRole
      parameters:
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Role successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    put:
      tags:
      - IAM
      summary: Updates a role
      operationId: updateRole
      parameters:
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleRequest'
        required: true
      responses:
        "204":
          description: Role successfully updated
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A role with the same name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    delete:
      tags:
      - IAM
      summary: Deletes a role
      operationId: deleteRole
      parameters:
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Role successfully deleted
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /roles/{roleId}/permissions:
    get:
      tags:
      - IAM
      summary: Retrieves the permissions associated to the role
      operationId: retrieveRolePermissions
      parameters:
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Permissions successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/permission'
        "404":
          description: The role has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - IAM
      summary: Attaches a permission to a role given their IDs
      operationId: attachPermissionToRole
      parameters:
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/associationRequest'
        required: true
      responses:
        "204":
          description: The permissions have been successfully attached.
        "404":
          description: Either the role or one of the permission have not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /roles/{roleId}/permissions/{permissionId}:
    delete:
      tags:
      - IAM
      summary: Detaches a permission from a role
      operationId: detachPermissionFromRole
      parameters:
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      - name: permissionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Permissions successfully detached.
        "404":
          description: The role or the permission has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /categories:
    get:
      tags:
      - IAM
      summary: Retrieves multiple categories.
      operationId: retrieveMultipleCategories
      parameters:
      - name: from
        in: query
        description: Indicates the offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 0
      - name: limit
        in: query
        description: Indicates the number of categories to retrieve
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 10
      responses:
        "200":
          description: The category have been successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/category'
        "400":
          description: One or more of the query parameters is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - IAM
      summary: Creates a new category.
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categoryRequest'
        required: true
      responses:
        "201":
          description: The categories have been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdResponse'
        "400":
          description: The category lacks required parameters or is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A category with the same name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /categories/{categoryId}:
    get:
      tags:
      - IAM
      summary: Retrieves a single category
      operationId: retrieveCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Category successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category'
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    put:
      tags:
      - IAM
      summary: Updates a category
      operationId: updateCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categoryRequest'
        required: true
      responses:
        "204":
          description: Category successfully updated
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A category with the same name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    delete:
      tags:
      - IAM
      summary: Deletes a category
      operationId: deleteCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Category successfully deleted
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /categories/{categoryId}/roles:
    get:
      tags:
      - IAM
      summary: Retrieves the roles associated to the category
      operationId: retrieveCategoryRoles
      parameters:
      - name: categoryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Roles successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/role'
        "404":
          description: The category has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - IAM
      summary: Attaches a role to a category given their IDs
      operationId: attachRoleToCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/associationRequest'
        required: true
      responses:
        "204":
          description: The role has been successfully attached.
        "404":
          description: Either the category or the role has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /categories/{categoryId}/roles/{roleId}:
    delete:
      tags:
      - IAM
      summary: Detaches a role from a category.
      operationId: detachRoleFromCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Role successfully detached.
        "404":
          description: The category or the role has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /groups:
    get:
      tags:
      - IAM
      summary: Retrieves multiple groups.
      operationId: retrieveMultipleGroups
      parameters:
      - name: from
        in: query
        description: Indicates the offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 0
      - name: limit
        in: query
        description: Indicates the number of groups to retrieve
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 10
      responses:
        "200":
          description: The group have been successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/group'
        "400":
          description: One or more of the query parameters is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - IAM
      summary: Creates a new group.
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupRequest'
        required: true
      responses:
        "201":
          description: The group has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdResponse'
        "400":
          description: The group lacks required parameters or is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A group with the same name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /groups/{groupId}:
    get:
      tags:
      - IAM
      summary: Retrieves a single group.
      operationId: retrieveGroup
      parameters:
      - name: groupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Group successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    put:
      tags:
      - IAM
      summary: Updates a Group
      operationId: updateGroup
      parameters:
      - name: groupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupRequest'
        required: true
      responses:
        "204":
          description: Group successfully updated
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A group with the same name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    delete:
      tags:
      - IAM
      summary: Deletes a group
      operationId: deleteGroup
      parameters:
      - name: groupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Group successfully deleted
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /groups/{groupId}/roles:
    get:
      tags:
      - IAM
      summary: Retrieves the roles associated to the group
      operationId: retrieveGroupRoles
      parameters:
      - name: groupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Roles successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/role'
        "404":
          description: The group has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - IAM
      summary: Attaches a role to a group given their IDs
      operationId: attachRoleToGroup
      parameters:
      - name: groupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/associationRequest'
        required: true
      responses:
        "204":
          description: The role has been successfully attached.
        "404":
          description: Either the group or the role has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /groups/{groupId}/roles/{roleId}:
    delete:
      tags:
      - IAM
      summary: Detaches a role from a group.
      operationId: detachRoleFromGroup
      parameters:
      - name: groupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Role successfully detached.
        "404":
          description: The group or the role has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /users:
    get:
      tags:
      - Users
      summary: Retrieves multiple users.
      operationId: retrieveMultipleUsers
      parameters:
      - name: from
        in: query
        description: Indicates the offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 0
      - name: limit
        in: query
        description: Indicates the number of users to retrieve
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 10
      responses:
        "200":
          description: The user have been successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        "400":
          description: One or more of the query parameters is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - Users
      summary: Invites a new user.
      operationId: inviteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
        required: true
      responses:
        "201":
          description: The user has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdResponse'
        "400":
          description: The user lacks required parameters or is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A user with the same login already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /users/{userId}:
    get:
      tags:
      - Users
      summary: Retrieves a single user.
      operationId: retrieveUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: User successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    put:
      tags:
      - Users
      summary: Updates a user
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
        required: true
      responses:
        "204":
          description: User successfully updated
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A user with the same login already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    delete:
      tags:
      - Users
      summary: Deletes a user
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: User successfully deleted
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /users/{userId}/roles:
    get:
      tags:
      - Users
      summary: Retrieves the roles associated to the user
      operationId: retrieveUserRoles
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Roles successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/role'
        "404":
          description: The user has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - Users
      summary: Attaches a role to a user given their IDs
      operationId: attachRoleToUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/associationRequest'
        required: true
      responses:
        "204":
          description: The role has been successfully attached.
        "404":
          description: Either the user or the role has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /users/{userId}/roles/{roleId}:
    delete:
      tags:
      - Users
      summary: Detaches a role from a user.
      operationId: detachRoleFromUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Role successfully detached.
        "404":
          description: The user or the role has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /users/{userId}/groups:
    get:
      tags:
      - Users
      summary: Retrieves the groups associated to the user
      operationId: retrieveUserGroups
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Groups successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/group'
        "404":
          description: The User has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - Users
      summary: Attaches a group to a user given their IDs
      operationId: attachGroupToUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/associationRequest'
        required: true
      responses:
        "204":
          description: The group has been successfully attached.
        "404":
          description: Either the user or the group has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /users/{userId}/groups/{groupId}:
    delete:
      tags:
      - Users
      summary: Detaches a group from a user.
      operationId: detachGroupFromUser
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      - name: groupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Group successfully detached.
        "404":
          description: The user or the group has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /serviceaccounts:
    get:
      tags:
      - ServiceAccounts
      summary: Retrieves multiple serviceaccounts.
      operationId: retrieveMultipleServiceAccounts
      parameters:
      - name: from
        in: query
        description: Indicates the offset for pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 0
      - name: limit
        in: query
        description: Indicates the number of serviceaccounts to retrieve
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 10
      responses:
        "200":
          description: The service account have been successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/serviceAccount'
        "400":
          description: One or more of the query parameters is not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - ServiceAccounts
      summary: Create a new service account.
      operationId: createServiceAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceAccountRequest'
        required: true
      responses:
        "201":
          description: The service account has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceAccountResponse'
        "400":
          description: The service account lacks required parameters or is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "409":
          description: A service account with the same login already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /serviceaccounts/{clientEmail}:
    get:
      tags:
      - ServiceAccounts
      summary: Retrieves a single service account.
      operationId: retrieveServiceAccount
      parameters:
      - name: clientEmail
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: ServiceAccount successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceAccount'
        "404":
          description: ServiceAccount not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    delete:
      tags:
      - ServiceAccounts
      summary: Deletes a service account
      operationId: deleteServiceAccount
      parameters:
      - name: clientEmail
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: ServiceAccount successfully deleted
        "404":
          description: ServiceAccount not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /serviceaccounts/{clientEmail}/roles:
    get:
      tags:
      - ServiceAccounts
      summary: Retrieves the roles associated to the service account
      operationId: retrieveServiceAccountRoles
      parameters:
      - name: clientEmail
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Roles successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/role'
        "404":
          description: The service account has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - ServiceAccounts
      summary: Attaches a role to a service account given their IDs
      operationId: attachRoleToServiceAccount
      parameters:
      - name: clientEmail
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/associationRequest'
        required: true
      responses:
        "204":
          description: The role has been successfully attached.
        "404":
          description: Either the service account or the role has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /serviceaccounts/{clientEmail}/roles/{roleId}:
    delete:
      tags:
      - ServiceAccounts
      summary: Detaches a role from a service account.
      operationId: detachRoleFromServiceAccount
      parameters:
      - name: clientEmail
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      - name: roleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Role successfully detached.
        "404":
          description: The service account or the role has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /serviceaccounts/{clientEmail}/groups:
    get:
      tags:
      - ServiceAccounts
      summary: Retrieves the groups associated to the service account
      operationId: retrieveServiceAccountGroups
      parameters:
      - name: clientEmail
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "200":
          description: Groups successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/group'
        "404":
          description: The ServiceAccount has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
    post:
      tags:
      - ServiceAccounts
      summary: Attaches a group to a service account given their IDs
      operationId: attachGroupToServiceAccount
      parameters:
      - name: clientEmail
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/associationRequest'
        required: true
      responses:
        "204":
          description: The group has been successfully attached.
        "404":
          description: Either the service account or the group has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /serviceaccounts/{clientEmail}/groups/{groupId}:
    delete:
      tags:
      - ServiceAccounts
      summary: Detaches a group from a service account.
      operationId: detachGroupFromServiceAccount
      parameters:
      - name: clientEmail
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      - name: groupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
      responses:
        "204":
          description: Group successfully detached.
        "404":
          description: The service account or the group has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
  /health/alive:
    get:
      tags:
      - Health-check
      summary: Check alive status
      description: |
        This endpoint returns a 200 status code when the HTTP server is up running.
      operationId: getHealthStatus
      responses:
        "200":
          description: healthStatus
        "500":
          description: genericError
  /health/ready:
    get:
      tags:
      - Health-check
      summary: Check readiness status
      description: |
        This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.
      operationId: getReadinessStatus
      responses:
        "200":
          description: healthStatus
        "503":
          description: healthNotReadyStatus
  /.well-known/jwks.json:
    get:
      tags:
      - OAuth2
      summary: URL of the OP's JSON Web Key Set [JWK] document
      description: |
        This contains the signing key(s) the RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
      operationId: getJwks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwks'
  /.well-known/openid-configuration:
    get:
      tags:
      - OAuth2
      summary: URL of list of the OpenID/OAuth endpoints
      description: |
        This URL returns a JSON listing of the OpenID/OAuth endpoints,  supported scopes and claims, public keys used to sign the tokens,  and other details. The clients can use this information to construct a request to the OpenID server.  The field names and values are defined in the OpenID Connect Discovery Specification
      operationId: getOpenidConfiguration
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/openid-configuration'
  /password_reset:
    get:
      tags:
      - Password
      summary: Shows the forgot password page form
      operationId: passwordResetForm
      responses:
        "200":
          description: Accepted
          content:
            text/html:
              schema:
                type: string
    post:
      tags:
      - Password
      summary: Shows the forgot password page form
      operationId: passwordResetPost
      parameters:
      - name: client_id
        in: query
        description: The client that is requesting to reset a user's passord
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "202":
          description: Accepted
          content:
            text/html:
              schema:
                type: string
        "400":
          description: Request malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/goError'
components:
  schemas:
    inboundApplication:
      required:
      - description
      - email
      - name
      type: object
      properties:
        name:
          type: string
          example: Lumiere
        email:
          type: string
          format: email
          example: lumiere@masmovil.com
        description:
          type: string
          example: Yoigo application
    application:
      required:
      - description
      - email
      - name
      type: object
      properties:
        id:
          type: string
          description: Internal id
          example: 00d472d1-a5d6-4c2a-a9c6-bef99b697958
        name:
          type: string
          example: Lumiere
        email:
          type: string
          format: email
          example: lumiere@masmovil.com
        issuer:
          type: string
          description: URL using the https scheme with no query or fragment component
            that the OP asserts as its Issuer Identifier
          example: https://name.masmovil.com/
        description:
          type: string
          example: Yoigo application
        created_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        updated_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
    inboundClient:
      required:
      - name
      - provider
      - redirect_url
      type: object
      properties:
        redirect_url:
          type: array
          items:
            type: string
            example: '["https://server1/callback","https://server2/callback"]'
        grant_types:
          type: array
          items:
            type: string
            example: '["password"]'
            enum:
            - implicit authorization_code refresh_token client_credentials password
              device_code
        name:
          type: string
          example: Lumiere Web
        provider:
          type: string
          example: YoigoProvider
        email:
          type: string
          format: email
          example: lumiere@masmovil.com
    client:
      required:
      - name
      - provider
      type: object
      properties:
        app_id:
          type: string
          description: Application id
          example: ljhX6gwmAnFcP1PLlwEI
        client_id:
          type: string
          description: Client id
          example: KgVxDps0ofShKg9ukPgK
        client_secret:
          type: string
          description: Client secret
          example: wyMrmIuhAXURn7ZG-Qec8O4qmEhWJiCRIBqedv6kJvs=
        redirect_url:
          type: array
          items:
            type: string
            example: '["https://server1/callback","https://server2/callback"]'
        grant_types:
          type: array
          items:
            type: string
            example: '["password"]'
            enum:
            - implicit authorization_code refresh_token client_credentials password
              device_code
        access_expiration:
          type: integer
          example: 3600
        refresh_expiration:
          type: integer
          example: 86400
        name:
          type: string
          example: Lumiere Web
        provider:
          type: string
          example: YoigoProvider
        email:
          type: string
          format: email
          example: lumiere@masmovil.com
        created_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        updated_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
    accessTokenResponse:
      required:
      - access_token
      - token_type
      type: object
      properties:
        access_token:
          type: string
          description: A token used by the client to make authenticated requests on
            behalf of the resource owner
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1VTkJaNa0ZGTWtKQlFqVkRPVFV4TlVWQ04wRTRPVEV5UWpGRFJFSTFNMFZEUXpBMU1UVTVNQSJ9.eyJpc3MiOiJodHRwczovL21hc21vdmlsLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJNN3A0YWUyeVdIN1N5bXdiVVlHcTJVdXdlVmp6WE5PR0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9tYXNtb3ZpbC5ldS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1MDQyMDM3NywiZXhwIjoxNTUwNTA2Nzc3LCJhenAiOiJNN3A0YWUyeVdIN1N5bXdiVVlHcTJVdXdlVmp6WE5PRyIsInNjb3BlIjoicmVhZDpjbGllbnRfZ3JhbnRzIGNyZWF0ZTpjbGllbnRfZ3JhbnRzIGRlbGV0ZTpjbGllbnRfZ3JhbnRzIHVwZGF0ZTpjbGllbnRfZ3JhbnRzIHJlYWQ6dXNlcnMgdXBkYXRlOnVzZXJzIGRlbGV0ZTp1c2VycyBjcmVhdGU6dXNlcnMgcmVhZDp1c2Vyc19hcHBfbWV0YWRhdGEgdXBkYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSBkZWxldGU6dXNlcnNfYXBwX21ldGFkYXRhIGNyZWF0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgY3JlYXRlOnVzZXJfdGlja2V0cyByZWFkOmNsaWVudHMgdXBkYXRlOmNsaWVudHMgZGVsZXRlOmNsaWVudHMgY3JlYXRlOmNsaWVudHMgcmVhZDpjbGllbnRfa2V5cyB1cGRhdGU6Y2xpZW50X2tleXMgZGVsZXRlOmNsaWVudF9rZXlzIGNyZWF0ZTpjbGllbnRfa2V5cyByZWFkOmNvbm5lY3Rpb25zIHVwZGF0ZTpjb25uZWN0aW9ucyBkZWxldGU6Y29ubmVjdGlvbnMgY3JlYXRlOmNvbm5lY3Rpb25zIHJlYWQ6cmVzb3VyY2Vfc2VydmVycyB1cGRhdGU6cmVzb3VyY2Vfc2VydmVycyBkZWxldGU6cmVzb3VyY2Vfc2VydmVycyBjcmVhdGU6cmVzb3VyY2Vfc2VydmVycyByZWFkOmRldmljZV9jcmVkZW50aWFscyB1cGRhdGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGRlbGV0ZTpkZXZpY2VfY3JlZGVudGlhbHMgY3JlYXRlOmRldmljZV9jcmVkZW50aWFscyByZWFkOnJ1bGVzIHVwZGF0ZTpydWxlcyBkZWxldGU6cnVsZXMgY3JlYXRlOnJ1bGVzIHJlYWQ6cnVsZXNfY29uZmlncyB1cGRhdGU6cnVsZXNfY29uZmlncyBkZWxldGU6cnVsZXNfY29uZmlncyByZWFkOmVtYWlsX3Byb3ZpZGVyIHVwZGF0ZTplbWFpbF9wcm92aWRlciBkZWxldGU6ZW1haWxfcHJvdmlkZXIgY3JlYXRlOmVtYWlsX3Byb3ZpZGVyIGJsYWNrbGlzdDp0b2tlbnMgcmVhZDpzdGF0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOnNoaWVsZHMgY3JlYXRlOnNoaWVsZHMgZGVsZXRlOnNoaWVsZHMgdXBkYXRlOnRyaWdnZXJzIHJlYWQ6dHJpZ2dlcnMgcmVhZDpncmFudHMgZGVsZXRlOmdyYW50cyByZWFkOmd1YXJkaWFuX2ZhY3RvcnMgdXBkYXRlOmd1YXJkaWFuX2ZhY3RvcnMgcmVhZDpndWFyZGlhbl9lbnJvbGxtZW50cyBkZWxldGU6Z3VhcmRpYW5fZW5yb2xsbWVudHMgY3JlYXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRfdGlja2V0cyByZWFkOnVzZXJfaWRwX3Rva2VucyBjcmVhdGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiBkZWxldGU6cGFzc3dvcmRzX2NoZWNraW5nX2pvYiByZWFkOmN1c3RvbV9kb21haW5zIGRlbGV0ZTpjdXN0b21fZG9tYWlucyBjcmVhdGU6Y3VzdG9tX2RvbWFpbnMgcmVhZDplbWFpbF90ZW1wbGF0ZXMgY3JlYXRlOmVtYWlsX3RlbXBsYXRlcyB1cGRhdGU6ZW1haWxfdGVtcGxhdGVzIiwiZ3R5IjoiY2xpZW50LWNyZWRlbnRpYWxzIn0.h6GTIB8OMcMXDxyUzUW8tJ8LW7U_yIQfCshDuOW9E-_rd9NNRBxzsPhVHllawcB336Xfo3kwrVmS0KdkLGWz4BJo67R_4KXjQ_1VcmHD2WfzpS06fmjdV1DWZbd5dv3LBtPXEIYxWVzFSUcAlIKo5cstYlUWvb1weh56yBu26Y48UK5CIjwLmqAtlxL3kNcMI_PPuM-UmiQPeNe8cKPN4c7Tf_aVw38DcGydY53GIJ_fTeRvB5kb9CO4bs6g4iWOFZFFuLAluRFZsKcqJwNdW1RDYB_blmva5Q8JrBeU5TkbfdrWIL2QfdD93hjLFcWgE9z6txUz5opW2qkcMoQkLA
        scope:
          type: string
          description: Scopes
          example: read:client_grants create:client_grants delete:client_grants update:client_grants
        expires_in:
          type: integer
          example: 86400
        token_type:
          type: string
          example: Bearer
        refresh_token:
          type: string
          description: A token used by the client to obtain a new access token without
            having to involve the resource owner.
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1VTkJNa0ZGTWtKQlFqVkRPVFV4TlVWQ04wRTRPVEV5UWpGRFJFSTFNMFZEUXpBMU1UVTVNQSJ9
    errorAccessTokenResponse:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          description: A single error code
          example: invalid_request
          enum:
          - invalid_request
          - access_denied
          - invalid_client
          - invalid_grant
          - unauthorized_client
          - unauthorized_grant_type
          - invalid_scope
          - error_description
          - error_uri
        error_description:
          type: string
          description: A human-readable text providing additional information, used
            to assist in the understanding and resolution of the error occurred
        error_uri:
          type: string
    goError:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of error
          example: MM0000001
        status:
          type: integer
          description: Status code of the response
          example: 400
        msg:
          type: string
          description: Final user message
          example: Invalid inbound entit
        componentMsg:
          type: string
          description: Technical message
          example: EOF. Inbound application malformed
        sentryCode:
          type: string
          description: Unique identifier to use in sentry
          example: fake-req-id
    jwk:
      required:
      - keys
      type: object
      properties:
        alg:
          type: string
          description: The "alg" (algorithm) member identifies the algorithm intended
            for use with the key
          example: RS256
        kty:
          type: string
          description: The "kty" (key type) member identifies the cryptographic algorithm
            family used with the key, such as "RSA" or "EC". "kty" values should either
            be registered in the IANA JSON Web Key Types registry defined in [JWA]
            or be a value that contains a Collision-Resistant Name.  The "kty" value
            is a case-sensitive string.
          example: RSA
        use:
          type: string
          description: The "use" (public key use) member identifies the intended use
            of the public key.  The "use" parameter is employed to indicate whether
            a public key is used for encrypting data or verifying the signature on
            data.
          example: sig
          enum:
          - sig
          - enc
        x5c:
          type: array
          description: The "x5c" (X.509 Certificate Chain) member contains a chain
            of one or more PKIX certificates [RFC5280].  The certificate chain is
            represented as a JSON array of certificate value strings.  Each string
            in the array is a base64 encoded ([RFC4648] Section 4 -- not base64url
            encoded) DER [ITU.X690.1994] PKIX certificate value
          example:
          - MIIDBTCCAe2gAwIBAgIJMg1BS/K2xovDMA0GCSqGSIb3DQEBCwUAMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTAeFw0xODA0MjcwNzQ5MjFaFw0zMjAxMDQwNzQ5MjFaMCAxHjAcBgNVBAMTFW1hc21vdmlsLmV1LmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALRLXzvNzYGhvXUVefnrw+2+5k/J5PkSiv3dpbQjJB/kM3uPPVa/+qiy9gvcZbSkeN+Z6D3+fTcIW+xdWuiIj8kiBGLpHCjPz5ybaTq87uvx2KfEqx+T/Q7z9...
          items:
            type: string
        n:
          type: string
          example: tEtfO83NgaG9dRV5-evD7b7mT8nk-RKK_d2ltCMkH-Qze489Vr_6qLL2C9xltKR435noPf59Nwhb7F1a6IiPySIEYuk...
        e:
          type: string
          example: AQAB
        kid:
          type: string
          description: The "kid" (key ID) member is used to match a specific key.  This
            is used, for instance, to choose among a set of keys within a JWK Set
            during key rollover
          example: MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA
        x5t:
          type: string
          description: The "x5t" (X.509 Certificate SHA-1 Thumbprint) member is a
            base64url encoded SHA-1 thumbprint (a.k.a. digest) of the DER encoding
            of an X.509 certificate [RFC5280].
          example: MUNBMkFFMkJBQjVDOTUxNUVCN0E4OTEyQjFDREI1M0VDQzA1MTU5MA
    jwks:
      required:
      - keys
      type: object
      properties:
        keys:
          type: array
          description: The JSON object MUST have a "keys" member, which is an array
            of JWKs.
          items:
            $ref: '#/components/schemas/jwk'
    createdResponse:
      type: object
      properties:
        id:
          type: string
          description: Internal id
          example: 00d472d1-a5d6-4c2a-a9c6-bef99b697958
    associationRequest:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: Internal id
          example: 00d472d1-a5d6-4c2a-a9c6-bef99b697958
    permissionRequest:
      required:
      - name
      type: object
      properties:
        name:
          pattern: ^[a-z0-9]+\.[a-z0-9]+\.[a-z0-9]+$
          type: string
          description: The name of the permission
          example: application.users.create
        description:
          type: string
          description: A description of the permission
          example: Gives the ability to create new users
    permission:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the permission.
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
        name:
          pattern: ^[a-z0-9]+\.[a-z0-9]+\.[a-z0-9]+$
          type: string
          description: The name of the permission
          example: application.users.create
        description:
          type: string
          description: A description of the permission
          example: Gives the ability to create new users
        created_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        updated_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
    roleRequest:
      required:
      - display_name
      - name
      type: object
      properties:
        name:
          type: string
          description: The unique name of the role
          example: admin
        display_name:
          type: string
          description: The beautified name of the role
          example: Application administrator
        description:
          type: string
          description: A description of the role
          example: Able to do basically everything
    role:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the role.
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
        name:
          type: string
          description: The unique name of the role
          example: admin
        display_name:
          type: string
          description: The beautified name of the role
          example: Application administrator
        description:
          type: string
          description: A description of the role
          example: Able to do basically everything
        created_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        updated_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
    categoryRequest:
      required:
      - display_name
      - name
      type: object
      properties:
        name:
          type: string
          description: The unique name of the category
          example: authn
        display_name:
          type: string
          description: The beautified name of the category
          example: Login authorization roles
        description:
          type: string
          description: A description of the category
          example: Contains the roles for the Login squad
    category:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the category.
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
        name:
          type: string
          description: The unique name of the category
          example: authn
        display_name:
          type: string
          description: The beautified name of the category
          example: Login authorization roles
        description:
          type: string
          description: A description of the category
          example: Contains the roles for the Login squad
        created_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        updated_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
    groupRequest:
      required:
      - display_name
      - name
      type: object
      properties:
        name:
          type: string
          description: The unique name of the group
          example: vista360-admins
        display_name:
          type: string
          description: The beautified name of the group
          example: Vista360 administrators
        description:
          type: string
          description: A description of the category
          example: Administrators of Vista360 platform
    group:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the group.
          example: a8456194-5595-4df1-b37b-1b4d88c545a6
        name:
          type: string
          description: The unique name of the group
          example: vista360-admins
        display_name:
          type: string
          description: The beautified name of the category
          example: Vista360 administrators
        description:
          type: string
          description: A description of the category
          example: Administrators of Vista360 platform
        created_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        updated_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
    userRequest:
      required:
      - last_name
      - login
      - name
      type: object
      properties:
        login:
          type: string
          description: An identifier (email/username/phone) used by the user to log
            in.
          example: john.doe@masmovil.com
        name:
          type: string
          description: The name of the user
          example: John
        last_name:
          type: string
          description: The last name of the user
          example: Doe
        sfid:
          type: string
          description: User's legacy ID
          example: AEXCA1012
    user:
      type: object
      properties:
        login:
          type: string
          description: An identifier (email/username/phone) used by the user to log
            in.
          example: john.doe@masmovil.com
        name:
          type: string
          description: The name of the user
          example: John
        last_name:
          type: string
          description: The last name of the user
          example: Doe
        provider_internal_id:
          type: string
          description: The identifier used by login providers to associate the resources
            of the user
          example: "5519376"
        created_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        updated_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        last_login_at:
          type: string
          description: Time of the user's last login.
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        last_refresh_at:
          type: string
          description: Time of the user's last refresh.
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
    serviceAccountRequest:
      required:
      - client_id
      - description
      - email
      - moi
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the service account
          example: ericson
        email:
          type: string
          description: The email of contact
          example: user@ericson.com
        description:
          type: string
          description: The description of service account
          example: Service account to access mysim
        client_id:
          type: string
          description: Client ID with the correct grant type
          example: 1ZhpSU8SweFOjqXn2hdK
        moi:
          type: integer
          description: Mobile Operator ID which service account will work
          example: 1
        overwrite:
          type: boolean
          description: true -> Overwrite the service account
          example: true
    serviceAccountResponse:
      type: object
      properties:
        private_key_id:
          type: string
          description: The uniq id of private key
          example: e41c469d-feab-412d-89fe-573ed3498b95
        private_key:
          type: string
          description: RSA private key
          example: |
            -----BEGIN RSA PRIVATE KEY-----
            MIIEpAIBAAKCAQEA2MHrzHa+vsjgUo9uNtXk8JMzciO1p8Rmat6+eAe1z0xgNziS
            FpZmwj3oFTj9Lda+9H6LwWuWOMmVwLTOTZbKVsk/s0zf0i6gDzKUHbSBBd9F21Hi
            qGm05dj/+w9ATKSJysnQuV0vMTfBwiBUV01VpeAcyMSJWLy/b8uPS9pbtS0618P9
            OUkYiVYwBibYc/QugI2V1BX1IYI7n9rmsyQYe0ysIUHVC7/biB1DAhG138zQ9qJb
            RvU8DqWhiESDcn0YZ5spAKWNm1YRTY7tcIyY5k2TB9ZdqmViW5zWjjUSxExs3ruh
            SalQpTIu8/1mm2O1aBzZfJKrJBdqw5g94uRPfQIDAQABAoIBAQCTVBOy0M9Lm/ul
            Aip2iSHoRxVDsnPpSTwXzbiGmy7/bLlFL2VUhvvncO6LZkXn3zvBsTXKzRa5GIN6
            DSrgX+q93GI4u7qyAND4I3e7TRIZbK3tqZW2xMqZI8qx2abpsTibJluBco3+FRjU
            mubYxA7ABTlrWPLF5tzz3tdSRmPpG0jNtbwXuFcJ6h/Y5WOJrXreIXngBrKoO38g
            zfrDVLpWMURVZK/vel22hBuzdfhUAj18ihJsrnLCH37ODpBmZhfQ85Evs08IuoLC
            BaByDYybIbprTNF8ytziGrX4Swri9HqDO2ra1g9aGxHlpmByu/6kccEX6FJtfF3i
            FuXHeeshAoGBAP9JFbnGtGlVIyyesPvVyxURyToIrjGh2/kVOb+27M16O48QWoFK
            Jl/ITYnZVOQiZpWb3mzonOGiUD6HBUHO8jdHYXEL3lld03bhk77rKit2ylP+5cn1
            dvw0/32bbASQZBrEO/IVkluaPFQkESBdGJvGKe2fjz4JsBoANBpByZf1AoGBANld
            Ov9AR9TINN19t5fsbz565Z9F3WOoBue1YAM20Ld8JZZKFgxiImp/WS844IVW4ZIx
            ZS+zqnDYPNpsnzMsggKzF/FTr9x9OVfrlF2BLAXKUyb16PsNL5VVeOTRm55iKbl/
            2PO2Q/GQnyHtWgwWvW850pGCz9bWZomaq1EFz4xpAoGAcevtdBAGZpMFtV3D4T5Q
            +EANqoZBJgjzHz6nnLRHDJMljPxhRx0N7uR2JbQEvCHV4aHDKprLl61VXfHnGKz/
            TkfeZhJD0WGbgou74REUqnzCYaV4ah3OUVJdSXJYS9kbsw4rKicSPyqfDXVi5yxk
            VO+julTgGXE9Uv0QQz9kdRkCgYEAlxIaB/+4LOY8/9f5ewijxIwL/afEGBhXPEGu
            Cm3VoEETqqGxM0gdXWFHLe/c9C+PNVlJV18KzcUsfi7ScvGzJocs09hzOM57xWSB
            SH+Xhiq5ojF1jM78TFEMZhRckTbugvOdaL07+a+nOiBJ3m8LmDta4zFEnK+Esoyi
            Fvzv5EkCgYBna9BA4qyBB9135oVIi+5/o42XRiuDo7WIdNX9Li6mjtFx2FiKfurn
            1kOjPnkdHj9gZAHsj0E0kyoHE4l/RYL0Pf/HF+aj3rtnFEWZibNTDumChiYTsDdP
            Dy0S1js0FM6dxOEaYllQ6Ulm39h0keQxelXhle1Y3d0E+givAsAevg==
            -----END RSA PRIVATE KEY-----
        client_id:
          type: string
          description: Client ID with the correct grant type
          example: 1ZhpSU8SweFOjqXn2hdK
        client_email:
          type: string
          description: Client email generated to uniquely identify the service account
          example: ericson@1ZhpSU8SweFOjqXn2hdK.auth.masmovil.com
        type:
          type: string
          description: Type of the service account
          example: service_account
        token_uri:
          type: string
          description: Endpoint to make oauth request
          example: https://authn.k8s.masmovil.com/oauth/token
        auth_uri:
          type: string
          description: Endpoint to make oauth authorize request
          example: https://authn.k8s.masmovil.com/oauth/authorize
        project_id:
          type: string
          description: Top Entity Id
          example: HIcsET4rXlucw7m6gE7T
    serviceAccount:
      type: object
      properties:
        id:
          type: string
          description: Client ID with the correct grant type
          example: 1ZhpSU8SweFOjqXn2hdK
        name:
          type: string
          description: The name of the service account
          example: ericson
        enabled:
          type: boolean
          description: true -> Enable the service account
          example: true
        email:
          type: string
          description: The email of contact
          example: user@ericson.com
        description:
          type: string
          description: The description of service account
          example: Service account to access mysim
        client_email:
          type: string
          description: Client email generated to uniquely identify the service account
          example: ericson@1ZhpSU8SweFOjqXn2hdK.auth.masmovil.com
        moi:
          type: integer
          description: Mobile Operator ID which service account will work
          example: 1
        created_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        updated_at:
          type: string
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        last_use_at:
          type: string
          description: Time of the last use.
          format: date-time
          example: 2019-06-20T06:24:57.55148Z
        roles:
          type: array
          items:
            $ref: '#/components/schemas/role'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/group'
    openid-configuration:
      type: object
      properties:
        token_endpoint:
          type: string
          example: https://authn.k8s.masmovil.com/oauth/token
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
            example: '["client_secret_post","client_secret_basic"]'
            enum:
            - client_secret_post
            - client_secret_basic
        jwks_uri:
          type: string
          example: https://authn.k8s.masmovil.com/.well-known/jwks.json
        response_modes_supported:
          type: array
          items:
            type: string
            example: '["query","fragment","form_post"]'
            enum:
            - query
            - fragment
            - form_post
        subject_types_supported:
          type: array
          items:
            type: string
            example: '["public"]'
            enum:
            - public
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
            example: '["RS256"]'
            enum:
            - RS256
        response_types_supported:
          type: array
          items:
            type: string
            example: '["code","token"]'
            enum:
            - code
            - token
        scopes_supported:
          type: array
          items:
            type: string
            example: '["openid","profile","email","offline_access"]'
            enum:
            - openid
            - profile
            - email
            - offline_access
        issuer:
          type: string
          example: '{appName}.auth.masmovil.com'
        request_uri_parameter_supported:
          type: boolean
          example: false
        userinfo_endpoint:
          type: string
        authorization_endpoint:
          type: string
          example: https://authn.k8s.masmovil.com/oauth/authorize
        http_logout_supported:
          type: boolean
          example: false
        frontchannel_logout_supported:
          type: boolean
          example: false
        end_session_endpoint:
          type: string
        claims_supported:
          type: array
          items:
            type: string
            example: '["aud","cid","exp","iat","iss","moi","scope","sub","tid","user_metadata","app_metadata","given_name","family_name","name"]'
            enum:
            - aud
            - cid
            - exp
            - iat
            - iss
            - moi
            - scopes
            - sub
            - tid
            - user_metadata
            - app_metadata
            - given_name
            - family_name
            - name
    body:
      required:
      - grant_type
      type: object
      properties:
        grant_type:
          type: string
          description: Grant type of token
          example: password
          enum:
          - authorization_code
          - password
          - refresh_token
        audience:
          type: string
          description: Audience of the request
        scope:
          type: string
          description: Scope of permissions
        username:
          type: string
          description: Username of final customers (required for grant_type=password)
          example: usuario@gmail.com
        password:
          type: string
          description: Password of final customers (required for grant_type=password)
          example: "123456"
        state:
          type: string
          description: CSRF token used in the authorization request (for authorization_code
            and implicit flows)
          example: OyMh_ObySiyWi7SrXgfIdg
        code:
          type: string
          description: Authorization code (required for authorization_code flow)
          example: OyMh_ObySiyWi7SrXgfIdg
        code_verifier:
          type: string
          description: Code challenge value generated by the client in the authorization
            request (required for authorization_code flow)
          example: 5VTycQU924SQ3jHp5g9zcvMF2ai3aN89kxzB2D5QJUrejxam3jddqFUugD8F
        assertion:
          type: string
          description: Assertion with which to get an access_token
  securitySchemes:
    clientAuth:
      type: http
      scheme: basic
